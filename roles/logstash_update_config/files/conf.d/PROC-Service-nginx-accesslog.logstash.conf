filter {
  if [type] == "nginx-accesslog" {
    grok {
      match => { "message" => "(?<remote_ip>[^,\s]+),*\s*(?<proxy_path>.*?)\s\-\s+(?<remote_user>\S+)\s\[(?<timestamp>.*)\]\s+\"(?<request_method>\S+)\s+(?<uri>.*)\s+(?<http_version>HTTP\S+)\"\s+(?<status>\d+)\s+(?<body_bytes_sent>\d+)\s+\"(?<http_referer>.*)\"\s\"(?<http_user_agent>.*?)\"(\s+\"(?<http_host>.*?)\"\s+(?<upstream_addr>\S+)\s+ups_resp_time:\s+(?<upstream_response_time>.*?)\srequest_time:\s(?<request_time>.*)\s\"(?<upstream_status>.*)\")?" } }
    prune {
      blacklist_values => [
        "upstream_addr", "-",
        "upstream_status", "-",
        "upstream_response_time", "-"
      ]
    }
    if [proxy_path] {
      mutate {
        split => { "proxy_path" => ", " }
      }
      ruby {
        code => '
          l = event.get("[proxy_path]")
          p = event.get("[proxy_path]").length
          p1 = p - 1
          p2 = p - 2
          t = l[p1]
          if l[p1] == "127.0.0.1"
            t = l[p2]
          end
          event.set("cdn_ip",t)
          event.set("proxy_hopcount",p)
        '
      }
    }
    if [upstream_addr] {
      grok {
        match => { "upstream_addr" => "%{IP:upstream_ip}\:%{NUMBER:upstream_port}" }
        remove_field => [ "upstream_addr" ]
        tag_on_failure => [""]
      }
    }
    if [uri] {
      grok {
        match => {"uri" => "^/(?<uri_project>[^/\n\s]*)"}
        tag_on_failure => [""]
      }
    }
    if [remote_ip] == "unknown" {
      mutate {
        replace => { "remote_ip" => "0.0.0.0" }
      }
    }
    date {
      match => [ "timestamp", "dd/MMM/yyyy:HH:mm:ss Z"]
    }
    translate {
      dictionary_path => "/etc/logstash/dicts/cdn_list.yml"
      field => "cdn_ip"
      destination => "cdn_region"
      fallback => "unknown"
    }
    geoip {
      source => "remote_ip"
    }
    mutate {
      copy => { "[beat][name]" => "host" }
      rename => { "source" => "log_file" }
    }
    mutate {
      remove_field => [ "prospector","tags","beat","offset","timestamp" ]
    }
    mutate {
      # E for ES, F for file
      add_tag => ["E"]
    }
  }
}
